<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Extjs on All the things about web and javascript</title>
    <link>http://vadimpopa.com/tags/extjs/</link>
    <description>Recent content in Extjs on All the things about web and javascript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2008 - 2014, Vadim Popa; all rights reserved.</copyright>
    <lastBuildDate>Thu, 11 Aug 2016 11:53:43 +0300</lastBuildDate>
    <atom:link href="http://vadimpopa.com/tags/extjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Sencha Ext.Config</title>
      <link>http://vadimpopa.com/using-sencha-ext-config/</link>
      <pubDate>Thu, 11 Aug 2016 11:53:43 +0300</pubDate>
      
      <guid>http://vadimpopa.com/using-sencha-ext-config/</guid>
      <description>&lt;p&gt;Check out my post &lt;a href=&#34;https://www.sencha.com/blog/using-sencha-ext-config/&#34; target=&#34;_blank&#34;&gt;Using Sencha Ext.Config&lt;/a&gt; on &lt;a href=&#34;http://sencha.com&#34; target=&#34;_blank&#34;&gt;Sencha&lt;/a&gt; blog to find out more about the new Ext.Config features that are available in ExtJS 6.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lazy loading Components with ComponentLoader</title>
      <link>http://vadimpopa.com/lazy-loading-components-with-componentloader/</link>
      <pubDate>Fri, 05 Aug 2016 17:17:49 +0300</pubDate>
      
      <guid>http://vadimpopa.com/lazy-loading-components-with-componentloader/</guid>
      <description>&lt;p&gt;Check out my post &lt;a href=&#34;http://moduscreate.com/lazy-loading-components-with-componentloader/&#34; target=&#34;_blank&#34;&gt;Lazy Loading Components with ComponentLoader&lt;/a&gt; on &lt;a href=&#34;http://moduscreate.com&#34; target=&#34;_blank&#34;&gt;ModusCreate&lt;/a&gt; to find out how to use Sencha &lt;code&gt;ComponentLoader&lt;/code&gt; to build lazy loading Components or Views.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sencha ViewModel Tips</title>
      <link>http://vadimpopa.com/sencha-viewmodel-tips/</link>
      <pubDate>Wed, 06 Jul 2016 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/sencha-viewmodel-tips/</guid>
      <description>&lt;p&gt;Check out my post &lt;a href=&#34;http://moduscreate.com/sencha-viewmodel-tips/&#34; target=&#34;_blank&#34;&gt;Sencha ViewModel Tips&lt;/a&gt; on &lt;a href=&#34;http://moduscreate.com&#34; target=&#34;_blank&#34;&gt;ModusCreate&lt;/a&gt; blog for great tips. Also you can find the latest &lt;a href=&#34;https://gist.github.com/vadimpopa/fcebedfc2570e6fe197188257e235e01&#34; target=&#34;_blank&#34;&gt;Revision&lt;/a&gt; updated and anytime on my github account (or embedded below). Soon more to come with great ExtJS6 stuff.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;http://gist.github.com/fcebedfc2570e6fe197188257e235e01.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Split large AngularJS Controllers using the Mixin Pattern</title>
      <link>http://vadimpopa.com/split-large-angularjs-controllers-using-the-mixin-pattern/</link>
      <pubDate>Sun, 02 Mar 2014 21:12:06 +0300</pubDate>
      
      <guid>http://vadimpopa.com/split-large-angularjs-controllers-using-the-mixin-pattern/</guid>
      <description>&lt;p&gt;In case if your controller became too large and the inheritance is not a solution, the Mixin pattern can solve this problem very easy by splitting the logic in mixins each serving a functionality or a feature. Within AngularJS I found a easy to do it by using the &lt;code&gt;$controller&lt;/code&gt; service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//AngularJS Mixin
app.controller(&#39;CanSingController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	$scope.sing = function() {
	         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
	    };
    }
]);


app.controller(&#39;MusicianController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	var canSingCtrl = $controller(&#39;CanSingController&#39;,{$scope: $scope});

    	$scope.whatMusicianCanDo = function() {

    		//Call locally, or best call sing in your view
    		$scope.sing();
    	};
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fun and comparation I brought also an ExtJS example found in its &lt;a href=&#34;http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Class-cfg-mixins&#34; title=&#34;http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Class-cfg-mixins&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//ExtJS Mixin
Ext.define(&#39;CanSing&#39;, {
     sing: function() {
         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
     }
});

Ext.define(&#39;Musician&#39;, {
     mixins: [&#39;CanSing&#39;]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the &lt;code&gt;Musician&lt;/code&gt; will get a &lt;code&gt;sing&lt;/code&gt; method from &lt;code&gt;CanSing&lt;/code&gt; &lt;code&gt;controller&lt;/code&gt;/&lt;code&gt;mixin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If to raise same issue from ExtJS&amp;rsquo;s documentation: &lt;em&gt;what if the Musician already has a sing method? Or you want to mix in two classes, both of which define sing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In AngularJS this can be solved by defining the &lt;code&gt;sing&lt;/code&gt; method in the instantiated mixin, and use an identifier or a local variable within the parent controller to keep that instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//AngularJS Mixin without overriding
app.controller(&#39;CanSingController&#39;, [&#39;$scope&#39;
    function ($scope) {

	    return {
	    	sing: function() {
		         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
		    }
	    }
    }
]);

app.controller(&#39;MusicianController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	var canSing = $controller(&#39;CanSingController as canSing&#39;,{$scope: $scope}),

    	$scope.sing = function() {

    		// call trough the local variable
    		canSing.sing();	

    		//call trough the indentifier
    		$scope.canSing.sing();
    	}
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually I define within the &lt;code&gt;$scope&lt;/code&gt; the methods which are going to be exposed in views and in the instance the ones which will be called locally in the parent controller. This way I preserve a sort of encapsulation and also looks cleaner. But when defining wihtin the &lt;code&gt;$scope&lt;/code&gt; just make sure not to have overrides. To avoid them you could just use the &lt;code&gt;identifier&lt;/code&gt; approach which in some way also gives sort of encapsulation of all methods within one property.&lt;/p&gt;

&lt;p&gt;In ExtJS: &lt;em&gt;it&amp;rsquo;s good to define mixins as an object, where you assign a name to each mixin. In this case the sing method of &lt;code&gt;Musician&lt;/code&gt; will overwrite the mixed in &lt;code&gt;sing&lt;/code&gt; method. But you can access the original mixed in method through special mixins property.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//ExtJS Mixin without overriding
Ext.define(&#39;Musician&#39;, {
     mixins: {
         canSing: &#39;CanSing&#39;
     },

     sing: function() {
         // delegate singing operation to mixin
         this.mixins.canSing.sing.call(this);
     }
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>First thoughts about AngularJS from an ExtJS developer perspective</title>
      <link>http://vadimpopa.com/first-thoughts-about-angularjs-from-an-extjs-developer-perspective/</link>
      <pubDate>Fri, 22 Nov 2013 22:59:32 +0300</pubDate>
      
      <guid>http://vadimpopa.com/first-thoughts-about-angularjs-from-an-extjs-developer-perspective/</guid>
      <description>&lt;p&gt;I thought that is time for me to learn something else, something new from the Front-end world just to be on same wave with latest trends and to feed the brain with a different perspective. After all life is all about learning and in doing we learn.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/feelings_about_angularjs_over_time.png&#34; style=&#34;display: block;margin: 0 auto; width:400px;height:300px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;I like everything what&amp;#8217;s connected with web apps and lately I&amp;#8217;ve been keeping my eyes on AngularJS. Seeing it&amp;#8217;s growing popularity and that AngularJS advocates a different approach of building web apps, got me intrigued and I&amp;#8217;ve started the learn process. After a week of diving in many resources I&amp;#8217;ve decided to put down some of my thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning curve&lt;/strong&gt;&lt;br /&gt;
I can agree with this &lt;a href=&#34;http://www.bennadel.com/blog/2439-My-Experience-With-AngularJS-The-Super-heroic-JavaScript-MVW-Framework.htm&#34; title=&#34;http://www.bennadel.com/blog/2439-My-Experience-With-AngularJS-The-Super-heroic-JavaScript-MVW-Framework.htm&#34;&gt;guy&lt;/a&gt;. You get down and up while trying to understand how the core works and you think sometimes that some of the things are easier and faster to achieve with less effort in ExtJS. sometimes the opposite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation.&lt;/strong&gt;&lt;br /&gt;
Being indulged by ExtJS&amp;#8217;s good documentation, what I&amp;#8217;ve found on AngularJS made my start not easy. For more resources google is your friend. My search brought to surface a few good posts which I think worths to check:
&lt;!-- more --&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&#34;&gt;http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory&#34;&gt;http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ng-newsletter.com/posts/&#34;&gt;http://www.ng-newsletter.com/posts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals&#34;&gt;http://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;First experiment and thoughts&lt;/strong&gt;&lt;br /&gt;
Ended up with a &lt;a title=&#34;http://plnkr.co/edit/61rmik&#34; href=&#34;http://plnkr.co/edit/61rmik&#34; target=&#34;_blank&#34;&gt;simple directive&lt;/a&gt; analog to the &lt;a title=&#34;https://github.com/vadimpopa/Ux.field.Multiselect&#34; href=&#34;https://github.com/vadimpopa/Ux.field.Multiselect&#34; target=&#34;_blank&#34;&gt;multiselectfield&lt;/a&gt; Sencha Touch component I built a few months ago. The implementation wasn&amp;#8217;t smooth and intuitive. Had to make some debugging and reread some resource to understand how scopes work in AngularJS for directives, parent and child elements. Other important AngularJS specifics on my learn list, is to understand how the watchers work in directives and how to write the code to end up with less of them.&lt;/p&gt;

&lt;p&gt;Angular seems a powerful, not big library. But building your first web components will take some time. Is not like you would extend an ExtJS &lt;code&gt;Panel&lt;/code&gt; with some child items or a &lt;code&gt;View&lt;/code&gt; with a configured &lt;code&gt;XTemplate&lt;/code&gt; and some methods.&lt;/p&gt;

&lt;p&gt;Overall when building an app or component you could spent 40% of your time on writing html and 60% javascript, while on ExtJS around 85% is javascript. Also ExtJS has built in nice layouts and a platform for theming, while on AngularJS is needed a 3&amp;#8242;rd-party CSS/JS library or some personal efforts.&lt;/p&gt;

&lt;p&gt;I like Angular&amp;#8217;s two way binding, though I&amp;#8217;m not sure yet when there are a lot of watches, from the performance perspective how the app will behave. Directives are very nice to make reusable components, but I&amp;#8217;ll need some time to get used to Angular&amp;#8217;s way of configuring components(directives) trough html attributes when in ExtJS  I did it trough javascript objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-controller=&amp;quot;ExampleCtrl&amp;quot;&amp;gt;
    &amp;lt;nvd3-cumulative-line-chart
            data=&amp;quot;exampleData&amp;quot;
            id=&amp;quot;exampleId&amp;quot;
            width=&amp;quot;800&amp;quot;
            height=&amp;quot;400&amp;quot;
            showXAxis=&amp;quot;true&amp;quot;
            showYAxis=&amp;quot;true&amp;quot;
            tooltips=&amp;quot;true&amp;quot;
            interactive=&amp;quot;true&amp;quot;
            x=&amp;quot;xFunction()&amp;quot;
            y=&amp;quot;yFunction()&amp;quot;
            color=&amp;quot;colorFunction()&amp;quot;
            isArea=&amp;quot;true&amp;quot;
            margin=&amp;quot;{left:50,top:50,bottom:50,right:50}&amp;quot;
            &amp;gt;
        &amp;lt;svg&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/nvd3-cumulative-line-chart&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Next Step&lt;/strong&gt;&lt;br /&gt;
Climb next peak on that learning curve, with some more patient along with some beers, going to reread some of the resources and build some more directives.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inside Aymap, an ExtJS4 web application, part 2</title>
      <link>http://vadimpopa.com/aymap-part-2/</link>
      <pubDate>Tue, 02 Apr 2013 22:59:32 +0300</pubDate>
      
      <guid>http://vadimpopa.com/aymap-part-2/</guid>
      <description>&lt;p&gt;In this post will continue Aymap views exploration and share with you some extension tips and tricks that I&amp;#8217;ve used and I think might be useful for you too in writing your ExtJS4 web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;AyToolbox&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
If to look in previous part at &lt;code&gt;AyToolbox&lt;/code&gt; you can see that contains 5 items of &lt;code&gt;toolboxpanel&lt;/code&gt; &lt;code&gt;xtype&lt;/code&gt;. This widget does the job for 5 views and has the following define:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;AyMap.view.toolbox.Panel&#39;,{
    extend : &#39;Ext.grid.Panel&#39;,

   // More configs
    initComponent: function(){
        var me = this,
            store;

        Ext.apply(me,{
            // More configs
            columns: [{
                width: 100,
                sortable: true,
                dataIndex: &#39;name&#39;
            }],
                listeners: {
                    afterrender: function(view){
                        view.getPlugin(&#39;gridviewdragdrop&#39;).dragZone.getDragText = function() {
                            return this.dragData.records[0].get(&#39;name&#39;)
                        }

                        Ext.create(&#39;Ext.tip.ToolTip&#39;, {
                            target: view.el,
                            delegate: view.itemSelector,
                            trackMouse: true,
                            renderTo: Ext.getBody(),
                            listeners: {
                                beforeshow: function(tip) {
                                    tip.update(this.getRecord(tip.triggerElement).get(&#39;name&#39;));
                                },
                                scope: view
                            }
                        });
                    }
                }
            }
        });
        me.callParent(arguments);
        store = me.getStore();
        store.guaranteeRange(0, store.pageSize-1);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the best approach on how to add tooltips to grid columns trough delegation, which is much performant than using renderers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;renderers:  function (value, metadata){
        metadata.tdAttr = &#39;data-qtip=&amp;quot; &#39; + value + &#39;&amp;quot;&#39;;
        return value;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While working on this class I&amp;#8217;ve learned that if to use ExtJS Models at maximum, you can simplify views configurations. If you have a few similar views, like I had in &lt;em&gt;AyToolbox&lt;/em&gt;, but your columns &lt;em&gt;dataIndexes&lt;/em&gt; are not the same tough have the same goal: to show a description, &lt;strong&gt;then use Model&amp;#8217;s mapping feature&lt;/strong&gt;. Below you can see how mapping is done for a few models which are bound to the stores that provide records to those 5 grids within &lt;code&gt;AyToolbox&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;AyMap.model.Output&#39;, {
    extend: &#39;Ext.data.Model&#39;,
    fields: [
        {name: &#39;name&#39;, mapping: &#39;output_name&#39;,  type: &#39;string&#39;}

    ]
});

Ext.define(&#39;AyMap.model.Camera&#39;, {
    extend: &#39;Ext.data.Model&#39;,
    fields: [
    	{name: &#39;name&#39;, mapping: &#39;resource_name&#39;,  type: &#39;string&#39;}
    ]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Aymap objects&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
{% img right ../images/posts/map.png 260 180 %}&lt;/p&gt;

&lt;p&gt;If you look at an Aylook map(see left image), you can see some white or transparent fancy boxes. Those are aylook objects, each one having a few common styling properties like: colors, transparency, icons, borders; and a few Aylook specific properties: data related to the surveillance system and its devices. &lt;strong&gt;Under those objects actually stands the powerful ExtJS &lt;code&gt;Ext.Component&lt;/code&gt; and the magic of &lt;code&gt;Ext.XTemplate&lt;/code&gt;&lt;/strong&gt;. Using these nice classes, was easy enough just implement basics object layout/template, define an AbstractObject which covers objects common properties and functionalities and then extended it to get all types of objects Aylook would have &amp;#8211; mission accomplished.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;AyMap.ux.AbstractObject&#39;, {
    extend: &#39;Ext.Component&#39;,
    //More configs
    createObjTemplate: function(){
      return  new Ext.XTemplate(
        //Objects template
      );
    }
});

Ext.define(&#39;AyMap.ux.object.Camera&#39;, {
    extend: &#39;AyMap.ux.AbstractObject&#39;,
    //More specific configs
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another trick I&amp;#8217;ve used here is a factory class with a method which actually simplifies objects creation and decouples objects related code from UI code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;AyMap.util.ObjectFactory&#39;, {
    requires: [
        &#39;AyMap.ux.object.Camera&#39;,
        &#39;AyMap.ux.object.Zone&#39;
         //More requires
    ],

    singleton: true,

    create: function (type, config, extraData) {
        var object;
        switch (type) {
            case &#39;camera&#39;: {
               // Process configs here, make some changes...then create the object
               object = Ext.create(&#39;AyMap.ux.object.Camera&#39;, config);
            }
            //More objects
        return object;
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Properties windows&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
One of the main functionality of the Aymap is to change those objects properties according to user&amp;#8217;s preferences. This is done by a few properties windows which also have some common functionality. When building ExtJS applications you often might have common functionalities, which means that you have to use inheritance &amp;#8211; one of the base core feature provided by ExtJS.The same principle was used here. As you can see in images, all windows have in common the colours fieldset and the positions fields, which means that their code can be wrapped in methods that belong to the parent class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;AyMap.view.Properties&#39;, {
    extend: &#39;Ext.window.Window&#39;

    //Add window configs, example:
    modal: true,
    resizable: false,
    layout: &#39;fit&#39;,
    width: 300,

    initComponent: function () {
        var me = this;

        Ext.apply(me, {
            title : &#39;Objects properties&#39;
            // Add common configs
        });
        me.callParent();

        //Add common events, for all windows
        me.on(&#39;beforeclose&#39;, me.onBeforeClose,this);
        me.down(&#39;form&#39;).on(&#39;dirtychange&#39;,me.onFormDirtyChange);
    },
    getColoursFildsetCfg: function(){
        return {
            xtype: &#39;fieldset&#39;
            // more configs
        }
    },
    getPositionsFieldsCfg: function(){
        return {
            xtype: &#39;container&#39;,
            layout: &#39;column&#39;,
            defaultType: &#39;numberfield&#39;,
            defaults: {
                labelWidth: 15,
                minValue: 0,
                columnWidth: 0.50
            },
            items: [{
                fieldLabel: &#39;x&#39;,
                name: &#39;x&#39;
            },
            {
                fieldLabel: &#39;y&#39;,
                name: &#39;y&#39;
            }]
        };
    },
    getFormCfg: function(cfg){
        return Ext.apply(cfg,{
            xtype: &#39;form&#39;,
            frame: false,
            trackResetOnLoad: true,
            bodyPadding: 2,
            buttons: []
        });
    }
    // Add other methods and event handlers that are in common for all windows
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the final class, you can customise form&amp;#8217;s items and add other specific code and configs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;AyMap.view.properties.Camera&#39;, {
    extend: &#39;AyMap.view.Properties&#39;,

    initComponent: function () {
        var me = this;

        Ext.apply(me, {
            //Add other specific configs
            items: [me.getFormCfg({
                items: [
                    me.getImgOnFieldCfg(),
                    me.getPositionsFieldsCfg(),
                    me.getCheckboxesCfg(),
                    me.getColorFieldsCfg()
                ]
            })]
        });

        me.callParent();
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% img ../images/posts/camera.png 260 180 %}
{% img ../images/posts/link.png 260 180 %}
{% img ../images/posts/panel.png 260 180 %}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;&lt;br /&gt;
All tips I&amp;#8217;ve shown you and all other you might come up with can make your code smaller and cleaner. Also by applying them we touched some of the applications quality attributes: performance, flexibility and maintainability. Personally, while writing these posts I&amp;#8217;ve learned a important rule that there&amp;#8217;s always place for optimisations. So, think at least twice to the code, before writing and after, if this is the best solution you come up with.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reload a single record and refresh its ExtJs grid row</title>
      <link>http://vadimpopa.com/reload-a-single-record-and-refresh-its-extjs-grid-row/</link>
      <pubDate>Sat, 09 Mar 2013 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/reload-a-single-record-and-refresh-its-extjs-grid-row/</guid>
      <description>&lt;p&gt;Just gave the answer to this question on &lt;a title=&#34;extjs forum&#34; href=&#34;http://www.sencha.com/forum/showthread.php?258228-Reloading-a-single-record-droma-grid&#34; target=&#34;_blank&#34;&gt;extjs4 forum&lt;/a&gt; and decided to post it here too by adding a code example. The answer is very simple: just load the record with the new data from the server by using the static method &lt;code&gt;Ext.data.Model.load(id,config)&lt;/code&gt; then in the successful callback update that record, do a commit if you need, then refresh record&amp;#8217;s node. Below the explanation in code form:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Writer.Person&#39;, {
    extend: &#39;Ext.data.Model&#39;,
    fields: [
        {name: &#39;id&#39;, type: &#39;int&#39;},
        {name: &#39;name&#39;, type: &#39;string&#39;}
    ],
    proxy {
      // Config for your proxy, it&#39;s a must for model to have a proxy.
    }
});

Writer.Person.load(3, {
    scope: grid,
    failure: function(record, operation) {
        //do something if the load failed
    },
    success: function(record, operation) {
        var store = grid.getStore(),
            recToUpdate = store.getById(3);

         recToUpdate.set(record.getData());

     // Do commit if you need: if the data from
     // the server differs from last commit data
         recordToUpdate.commit();

         grid.getView().refreshNode(store.indexOfId(3));
    },
    callback: function(record, operation) {
        //do something whether the load succeeded or failed
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
