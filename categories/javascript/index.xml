<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on All the things about web and javascript</title>
    <link>http://vadimpopa.com/categories/javascript/</link>
    <description>Recent content in Javascript on All the things about web and javascript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2008 - 2014, Vadim Popa; all rights reserved.</copyright>
    <lastBuildDate>Wed, 06 Jul 2016 17:50:16 +0300</lastBuildDate>
    <atom:link href="http://vadimpopa.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sencha ViewModel Tips</title>
      <link>http://vadimpopa.com/sencha-viewmodel-tips/</link>
      <pubDate>Wed, 06 Jul 2016 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/sencha-viewmodel-tips/</guid>
      <description>&lt;p&gt;Check out my post &lt;a href=&#34;http://moduscreate.com/sencha-viewmodel-tips/&#34; target=&#34;_blank&#34;&gt;Sencha ViewModel Tips&lt;/a&gt; on &lt;a href=&#34;http://moduscreate.com&#34; target=&#34;_blank&#34;&gt;ModusCreate&lt;/a&gt; blog for great tips. Also you can find the latest &lt;a href=&#34;https://gist.github.com/vadimpopa/fcebedfc2570e6fe197188257e235e01&#34; target=&#34;_blank&#34;&gt;Revision&lt;/a&gt; updated and anytime on my github account. Soon more to come with great ExtJS6 stuff.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Split large AngularJS Controllers using the Mixin Pattern</title>
      <link>http://vadimpopa.com/split-large-angularjs-controllers-using-the-mixin-pattern/</link>
      <pubDate>Sun, 02 Mar 2014 21:12:06 +0300</pubDate>
      
      <guid>http://vadimpopa.com/split-large-angularjs-controllers-using-the-mixin-pattern/</guid>
      <description>&lt;p&gt;In case if your controller became too large and the inheritance is not a solution, the Mixin pattern can solve this problem very easy by splitting the logic in mixins each serving a functionality or a feature. Within AngularJS I found a easy to do it by using the &lt;code&gt;$controller&lt;/code&gt; service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//AngularJS Mixin
app.controller(&#39;CanSingController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	$scope.sing = function() {
	         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
	    };
    }
]);


app.controller(&#39;MusicianController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	var canSingCtrl = $controller(&#39;CanSingController&#39;,{$scope: $scope});

    	$scope.whatMusicianCanDo = function() {

    		//Call locally, or best call sing in your view
    		$scope.sing();
    	};
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fun and comparation I brought also an ExtJS example found in its &lt;a href=&#34;http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Class-cfg-mixins&#34; title=&#34;http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Class-cfg-mixins&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//ExtJS Mixin
Ext.define(&#39;CanSing&#39;, {
     sing: function() {
         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
     }
});

Ext.define(&#39;Musician&#39;, {
     mixins: [&#39;CanSing&#39;]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the &lt;code&gt;Musician&lt;/code&gt; will get a &lt;code&gt;sing&lt;/code&gt; method from &lt;code&gt;CanSing&lt;/code&gt; &lt;code&gt;controller&lt;/code&gt;/&lt;code&gt;mixin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If to raise same issue from ExtJS&amp;rsquo;s documentation: &lt;em&gt;what if the Musician already has a sing method? Or you want to mix in two classes, both of which define sing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In AngularJS this can be solved by defining the &lt;code&gt;sing&lt;/code&gt; method in the instantiated mixin, and use an identifier or a local variable within the parent controller to keep that instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//AngularJS Mixin without overriding
app.controller(&#39;CanSingController&#39;, [&#39;$scope&#39;
    function ($scope) {

	    return {
	    	sing: function() {
		         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
		    }
	    }
    }
]);

app.controller(&#39;MusicianController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	var canSing = $controller(&#39;CanSingController as canSing&#39;,{$scope: $scope}),

    	$scope.sing = function() {

    		// call trough the local variable
    		canSing.sing();	

    		//call trough the indentifier
    		$scope.canSing.sing();
    	}
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually I define within the &lt;code&gt;$scope&lt;/code&gt; the methods which are going to be exposed in views and in the instance the ones which will be called locally in the parent controller. This way I preserve a sort of encapsulation and also looks cleaner. But when defining wihtin the &lt;code&gt;$scope&lt;/code&gt; just make sure not to have overrides. To avoid them you could just use the &lt;code&gt;identifier&lt;/code&gt; approach which in some way also gives sort of encapsulation of all methods within one property.&lt;/p&gt;

&lt;p&gt;In ExtJS: &lt;em&gt;it&amp;rsquo;s good to define mixins as an object, where you assign a name to each mixin. In this case the sing method of &lt;code&gt;Musician&lt;/code&gt; will overwrite the mixed in &lt;code&gt;sing&lt;/code&gt; method. But you can access the original mixed in method through special mixins property.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//ExtJS Mixin without overriding
Ext.define(&#39;Musician&#39;, {
     mixins: {
         canSing: &#39;CanSing&#39;
     },

     sing: function() {
         // delegate singing operation to mixin
         this.mixins.canSing.sing.call(this);
     }
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Onblur like for a div in AngularJS to close a popup</title>
      <link>http://vadimpopa.com/onblur-like-for-a-div-in-angularjs-to-close-a-popup/</link>
      <pubDate>Fri, 24 Jan 2014 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/onblur-like-for-a-div-in-angularjs-to-close-a-popup/</guid>
      <description>&lt;p&gt;Often is needed to close a popup when the user clicks anywhere else in the page but not on popup. There are many workarounds for such functionality, including one of the simplest which is to give to the &lt;code&gt;div&lt;/code&gt; the &lt;code&gt;tabindex&lt;/code&gt; attribute and use &lt;code&gt;onblur&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;onblur&lt;/code&gt; wasn&amp;rsquo;t suitable for me because is fired only if the popup have got the focus, and the user may want to close that popup without giving the focus to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div tabindex=&amp;quot;-1&amp;quot; onblur=&amp;quot;closeMyPopup()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AngularJS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;popup&amp;quot; tabindex=&amp;quot;-1&amp;quot; data-ng-show=&amp;quot;form.popups.myPopup&amp;quot; data-ui-event=&amp;quot;{ blur : &#39;closeMyPopup()&#39;}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I&amp;rsquo;ve coded a very simple AngularJSÂ directive which evaluates an expression on the containing scope when the dom click event is triggered and the target is not a child of that popup:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.directive(&amp;quot;outsideClick&amp;quot;, [&#39;$document&#39;,&#39;$parse&#39;, function( $document, $parse ){
    return {
        link: function( $scope, $element, $attributes ){
            var scopeExpression = $attributes.outsideClick,
                onDocumentClick = function(event){
                    var isChild = $element.find(event.target).length &amp;gt; 0;

                    if(!isChild) {
                        $scope.$apply(scopeExpression);
                    }
                };

            $document.on(&amp;quot;click&amp;quot;, onDocumentClick);

            $element.on(&#39;$destroy&#39;, function() {
                $document.off(&amp;quot;click&amp;quot;, onDocumentClick);
            });
        }
    }
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And simply to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;popup&amp;quot; data-ng-show=&amp;quot;form.popups.myPopup&amp;quot; outside-click=&amp;quot;closeMyPopup()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How to add SVG patterns in your ExtJS 4.2.1 apps</title>
      <link>http://vadimpopa.com/how-to-add-svg-patterns-in-your-extjs-4-2-1-apps/</link>
      <pubDate>Mon, 23 Sep 2013 21:12:06 +0300</pubDate>
      
      <guid>http://vadimpopa.com/how-to-add-svg-patterns-in-your-extjs-4-2-1-apps/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/svg-patterns-380x300.png&#34; style=&#34;display: block;margin: 0 auto; width:380;height:300;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Though aren&amp;#8217;t widely used &lt;a title=&#34;http://www.w3.org/TR/SVG/pservers.html&#34; href=&#34;http://www.w3.org/TR/SVG/pservers.html&#34; target=&#34;_blank&#34;&gt;SVG Patterns&lt;/a&gt; are very powerful and light. Being vector graphics, a pattern adjusts very well to any screen resolution making the &lt;a title=&#34;http://philbit.com/svgpatterns/&#34; href=&#34;http://philbit.com/svgpatterns/&#34; target=&#34;_blank&#34;&gt;background crisp and nice&lt;/a&gt;. The only drawback would be is the lack of support on IE8 and lower and yes the lack of support in ExtJS 4.2.1 (and lower) too.&lt;/p&gt;

&lt;p&gt;Hopefully next versions of ExtJS will have within its SVG engine the needed piece which would allow us to add and use patterns in our ExtJS web apps. Until then, you canÂ check a demo on this &lt;a title=&#34;https://fiddle.sencha.com/#fiddle/i9&#34; href=&#34;https://fiddle.sencha.com/#fiddle/i9&#34; target=&#34;_blank&#34;&gt;sencha fiddle&lt;/a&gt; to see how SVG patterns can be added and used along withÂ &lt;a href=&#34;http://docs.sencha.com/extjs/4.2.1/#!/guide/drawing&#34; title=&#34;http://docs.sencha.com/extjs/4.2.1/#!/guide/drawing&#34;&gt;Ext.draw&lt;/a&gt;Â package. The demo shows a white background with &lt;a href=&#34;http://philbit.com/svgpatterns/#subtledots&#34; title=&#34;http://philbit.com/svgpatterns/#subtledots&#34;&gt;subtle dots&lt;/a&gt;Â in a chart and a circle sprite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to add custom sprites in ExtJS charts</title>
      <link>http://vadimpopa.com/how-to-add-custom-sprites-in-extjs-charts/</link>
      <pubDate>Sat, 07 Sep 2013 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/how-to-add-custom-sprites-in-extjs-charts/</guid>
      <description>&lt;p&gt;Though ExtJS charts are very rich in features sometimes our clients want more. Very often they want some specific features which in the end leads to adding new custom sprites to the charts. And ExtJS is ready to help us with the needed tools to accomplish those features and make the client happy.&lt;/p&gt;

&lt;p&gt;In this post I&amp;#8217;m going to add some light on how to add custom sprites in ExtJS charts based on a real world example. Let&amp;#8217;s say that the client would need sort of threshold line which would outline a few areas on the chart.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/charts_thresholds.png&#34; style=&#34;display: block;margin: 0 auto; width:380px;height:300px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;First thought which comes is how this feature would be integrated in our chart component, in a easy way that is usual for ExtJS and its users. Right, first we would need some chart configs, something like these ones below, or even could be an array of them:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
    threshold: 36,
    title: &#39;Goal&#39;
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luckily we can benefit of ExtJS&amp;#8217;s tools like plugins, mixins, extensions and drawing classes. Assuming that you know already the difference between a mixin and a plugin, I&amp;#8217;ll answer to the question which we brought earlier that for integration we would need a plugin.&lt;/p&gt;

&lt;p&gt;Now we can wrap those configs in a plugin config, in a chart component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.create(&#39;Ext.chart.Chart&#39;, {
        plugins: [{
            ptype: &#39;chartthresholds&#39;,
            items: [{
                  threshold: 36,
                  title: &#39;Goal&#39;
            },{
                threshold: 66,
                title: &#39;Huge&#39;
            }]
        }]
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having already the definition of the task, now we can define our plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Ux.chart.Thresholds&#39;, {
    extend: &#39;Ext.AbstractPlugin&#39;,
    alias: &amp;quot;plugin.chartthresholds&amp;quot;,
    constructor: function(config) {
      var me = this;

      // The collections of threshold items
      me.items = [];

      if (config) {
          Ext.apply(me, config);
      }
    },
     /**
     * The plugin initialization method which the owning Component calls at Component initialization time.
     */
    init : function(chart){}

    /**
     * The plugin cleanup method which the owning Component calls at Component destruction time.
     */
    destroy : function() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see from task definition we can have more threshold items, so our plugin will have a second purpose, which is, to act as a collection of threshold items.&lt;/p&gt;

&lt;p&gt;Now as we have the collection class prototyped we need the item, a ExtJS tool to use for to display on the chart a line and a text. Always look the answer in ExtJS source code in the respective classes. Since we are working with charts and drawing we can get the answer in a snap by looking for example how Legend is created, that we need to use Sprites to draw both the line and the text and a CompositeSprite to wrap them.&lt;/p&gt;

&lt;p&gt;But why would we need a CompositeSprite ? as the docs say a composite Sprite handles a group of sprites with common methods to a sprite such as hide, show, setAttributes. These methods are applied to the set of sprites added to the group. I would add also to importance the destroy method.&lt;/p&gt;

&lt;p&gt;Our threshold item gets the following definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Ux.chart.ThresholdItem&#39;, {
        extend: &#39;Ext.draw.CompositeSprite&#39;,

        visible: false,

        constructor: function(config) {
            var me = this;

            if (config) {
                Ext.apply(me, config);
            }

            me.callParent();

            me.on(&#39;mousedown&#39;, me.onMouseDown, me);
        },

        /**
         * @private Handler for threshold selecting/deselecting
         */
        onMouseDown: function() {
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next will finish our prototyping with adding methods definitions to the plugin for both sprites, the line and text:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Ux.chart.Thresholds&#39;, {
    extend: &#39;Ext.AbstractPlugin&#39;,

    .....................

   /**
    * @private Redraws all items, called after each chart redraw
    */
    redraw: function(){},

    /**
     * @private Draws threshold items
     */
     drawItems: function(){},

    /**
     * @private Creates label sprite and/or redraws it to the given position
     */
    drawLabel: function(item,x,y,z) {},

    /**
     * @private Creates line sprite and/or redraws it to the given position
     */
    drawLine: function(item,fromX, fromY, toX, toY, z) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we are done with prototyping we can proceed to sprites drawing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;drawLine: function(item,fromX, fromY, toX, toY, z) {
            var line = item.get(&#39;line&#39;),
                path = &#39;M&#39; + fromX + &#39;,&#39; + fromY + &#39;L&#39; + toX + &#39;,&#39; + toY;

            if(line){
                line.setAttributes({ path : path},true);
            }else{
                line = item.add(&#39;line&#39;, item.surface.add({
                    type: &#39;path&#39;,
                    path: path,
                    zIndex: z,
                    &amp;quot;stroke-width&amp;quot;: this.lineWidth,
                    opacity: 0,
                    fill: &#39;#a0142c&#39;,
                    stroke: this.lineStroke,
                    style: {
                        cursor: &#39;pointer&#39;
                    }
                }));
            }

            return line;
        },
        drawLabel: function(item,x,y,z) {
            var label = item.get(&#39;label&#39;);

            if(label){
                label.setAttributes({ x:x, y:y },true);
            }else{
                label = item.add(&#39;label&#39;, item.surface.add({
                    type: &#39;text&#39;,
                    x: x,
                    y: y,
                    zIndex: z,
                    fill: this.labelColor,
                    font: this.labelFont,
                    text: item.title,
                    style: {
                        cursor: &#39;pointer&#39;
                    }
                }));
            }
            return label;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Drawing methods are ready, it&amp;#8217;s time to get their coordinates. The coordinates are relative to design specifications, what&amp;#8217;s important is to get the idea on how to get them and how to use. Once you understand this you can play with positioning according to your designs. Below method it&amp;#8217;s what you would need to get started with the game.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;drawItems: function(){
            var me = this,
                chart = me.cmp,
                axes = chart.axes,
                leftAxis = axes.get(&#39;left&#39;),
                stepHeight = leftAxis.length / (leftAxis.to - leftAxis.from),
                x2 = leftAxis.width + leftAxis.x,
                zIndex = (this.zIndex || 0) + 2,
                items = me.items,
                li = items.length,
                i = 0,
                y1,item;

            for (; i &amp;amp;lt; li; i++) {
                item = items[i];

                y1 = leftAxis.y - stepHeight * item.threshold;

                me.drawLabel(item,5,y1, zIndex + 1);
                me.drawLine(item,5,y1-1,x2,y1-1,zIndex);

                if(!item.visible){
                    item.setAttributes({
                        hidden: false
                    }, true);

                    item.visible = true;
                }
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s time to instantiate the items:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;createItems: function() {
            var me = this,
                surface = me.cmp.surface,
                items = me.items,
                li = items.length,
                i = 0,
                item;

            for (; i &amp;amp;lt; li; i++) {
                item[i] = Ext.create(&#39;Ux.chart.ThresholdItem&#39;,Ext.apply({
                    thresholds: me,
                    surface: surface
                },items[i]));
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then finally redraw and init the plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;init: function (chart) {
            this.labelColor = chart.textColor;

            if(this.visible)
                Ext.Function.interceptAfter(chart,&amp;quot;redraw&amp;quot;,this.redraw,this);
        },
        redraw: function() {
            var me = this;

            if (!me.created) {
                me.created = true;
                me.createItems();
            }

            if(me.visible)
                me.drawItems();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the visible config, you could add a few lines of code to add some laziness and to make the threshold item visible later but not at first chart redraw.&lt;/p&gt;

&lt;p&gt;And yes, we end with cleaning:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;destroy: function(){
            var items = this.items,
                li = items.length,
                i = 0;
            
            for (; i &amp;amp;lt; li; i++) {
                items[i].destroy();
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s it, have a enjoyable charts customizing process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reload a single record and refresh its ExtJs grid row</title>
      <link>http://vadimpopa.com/reload-a-single-record-and-refresh-its-extjs-grid-row/</link>
      <pubDate>Sat, 09 Mar 2013 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/reload-a-single-record-and-refresh-its-extjs-grid-row/</guid>
      <description>&lt;p&gt;Just gave the answer to this question on &lt;a title=&#34;extjs forum&#34; href=&#34;http://www.sencha.com/forum/showthread.php?258228-Reloading-a-single-record-droma-grid&#34; target=&#34;_blank&#34;&gt;extjs4 forum&lt;/a&gt; and decided to post it here too by adding a code example. The answer is very simple: just load the record with the new data from the server by using the static method &lt;code&gt;Ext.data.Model.load(id,config)&lt;/code&gt; then in the successful callback update that record, do a commit if you need, then refresh record&amp;#8217;s node. Below the explanation in code form:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Writer.Person&#39;, {
    extend: &#39;Ext.data.Model&#39;,
    fields: [
        {name: &#39;id&#39;, type: &#39;int&#39;},
        {name: &#39;name&#39;, type: &#39;string&#39;}
    ],
    proxy {
      // Config for your proxy, it&#39;s a must for model to have a proxy.
    }
});

Writer.Person.load(3, {
    scope: grid,
    failure: function(record, operation) {
        //do something if the load failed
    },
    success: function(record, operation) {
        var store = grid.getStore(),
            recToUpdate = store.getById(3);

         recToUpdate.set(record.getData());

     // Do commit if you need: if the data from
     // the server differs from last commit data
         recordToUpdate.commit();

         grid.getView().refreshNode(store.indexOfId(3));
    },
    callback: function(record, operation) {
        //do something whether the load succeeded or failed
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title> Sencha Touch 2 SQL proxy for SQLite</title>
      <link>http://vadimpopa.com/sencha-touch-2-sql-proxy-for-sqlite/</link>
      <pubDate>Sun, 03 Mar 2013 21:12:06 +0300</pubDate>
      
      <guid>http://vadimpopa.com/sencha-touch-2-sql-proxy-for-sqlite/</guid>
      <description>

&lt;p&gt;Surfing Sencha forums day by day I&amp;#8217;ve come to the conclusion that today many Sencha Touch 2 users still don&amp;#8217;t know about the nice and well written SQL proxy (&lt;code&gt;Ext.data.proxy.Sql&lt;/code&gt;). Instead of it they use other extensions written by ST users which are easy to find on ST forum. But the default ST proxy also can by used for WebSQL or SQLite with Phonegap plugin and comparing with those extensions has a well written code, is more faster and is part of ST2.&lt;/p&gt;

&lt;p&gt;Saying this I&amp;#8217;ve decided to write a few words about how tot use it, only a few as here there&amp;#8217;s nothing more to write. Mainly because actually the SQL proxy is used like the other ST proxies except that it needs an override.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;App.model.MyModel&#39;, {
    extend: &#39;Ext.data.Model&#39;,

    config: {
        proxy: {
            type: &#39;sql&#39;
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only custom configuration is to include the following override of the default method &lt;code&gt;getDatabaseObject&lt;/code&gt; which has platform detection (only for iOS, but should be easy to add for Android too): if is not simulator and it&amp;#8217;s a web view then open the database trough Phonegap plugin &lt;code&gt;sqlitePlugin&lt;/code&gt;, else open it trough overridden method, thus the WebSQL &lt;code&gt;openDatabase&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Ext.data.proxy.SQLOverride&#39;, {
    override: &#39;Ext.data.proxy.SQL&#39;,

/* //Overridden method
    getDatabaseObject: function() {
        return openDatabase(this.getDatabase(), &#39;1.0&#39;, &#39;Sencha Database&#39;, 5 * 1024 * 1024);
    }
*/
    getDatabaseObject: function() {
        var isWebView = false;

        if(Ext.os.is.Android){
            isWebView = /AppName/i.test(navigator.userAgent);
        }
        else
        if (Ext.os.is.iOS &amp;amp;&amp;amp; !/simulator/i.test(navigator.platform)) {
            isWebView = /(iPhone|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
        }

        return isWebView ? sqlitePlugin.openDatabase(&amp;quot;data.sqlite&amp;quot;) : this.callParent();
    }
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the Phonegap plugin on github: &lt;a href=&#34;https://github.com/brodyspark/PhoneGap-sqlitePlugin-iOS&#34; title=&#34;https://github.com/brodyspark/PhoneGap-sqlitePlugin-iOS&#34;&gt;https://github.com/brodyspark/PhoneGap-sqlitePlugin-iOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also you can check this &lt;a href=&#34;http://druckit.wordpress.com/2013/04/02/revisiting-the-sencha-touch-2-2-sql-proxy/&#34;&gt;blog post&lt;/a&gt; for a nice cover.&lt;/p&gt;

&lt;h4 id=&#34;edit-25-03-2013&#34;&gt;&lt;strong&gt;EDIT(25.03.2013):&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Edited this post to add Android part. In the override just replaced the code of the &lt;em&gt;getDatabaseObject&lt;/em&gt;. And with the default user agent is impossible to indetify if it&amp;#8217;s a WebView or a browser. To overcome this, in case if you are on Phonegap, as I was, just set you user agent like following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;@Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        super.appView.getSettings().setUserAgentString(
        	    super.appView.getSettings().getUserAgentString()
        	    + &amp;quot; &amp;quot;
        	    + getString(R.string.app_name));

        super.loadUrl(Config.getStartUrl());
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
