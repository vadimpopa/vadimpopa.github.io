<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angularjs on All the things about web and javascript</title>
    <link>http://vadimpopa.com/categories/angularjs/</link>
    <description>Recent content in Angularjs on All the things about web and javascript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2008 - 2014, Vadim Popa; all rights reserved.</copyright>
    <lastBuildDate>Sun, 01 Feb 2015 22:59:32 +0300</lastBuildDate>
    <atom:link href="http://vadimpopa.com/categories/angularjs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compile can boost your directives</title>
      <link>http://vadimpopa.com/compile-can-boost-your-directives/</link>
      <pubDate>Sun, 01 Feb 2015 22:59:32 +0300</pubDate>
      
      <guid>http://vadimpopa.com/compile-can-boost-your-directives/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/rocket.png&#34; style=&#34;display: block;margin: 0 auto; width:150px;height:150px;&#34;&gt;
Use whenever you can &lt;a href=&#34;https://github.com/angular/angular.js/wiki/Understanding-Directives&#34;&gt;compile&lt;/a&gt; to boost your Angular directives and get rid of whatchers. For instance we have a &lt;code&gt;directive&lt;/code&gt; which acts as a data row in a &lt;code&gt;ngRepeat&lt;/code&gt;, like a grid row. Only besides the trivial columns this row has some action buttons.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--myDataRow.tpl.html--&amp;gt;
&amp;lt;div class=&amp;quot;my-data-row&amp;quot; ng-class=&amp;quot;{ &#39;my-data-row-selected&#39;: row.isSelected }&amp;quot; layout=&amp;quot;row&amp;quot;&amp;gt;
    &amp;lt;span class=&amp;quot;my-data-row-name&amp;quot;&amp;gt;
      &amp;lt;a class=&amp;quot;my-data-row-id&amp;quot; href=&amp;quot;&amp;quot;&amp;gt;{{ row.id }}&amp;lt;/a&amp;gt;
      &amp;lt;span&amp;gt;{{ row.name }}&amp;lt;/span&amp;gt;
    &amp;lt;/span&amp;gt;
    &amp;lt;span class=&amp;quot;my-data-row-actions&amp;quot; flex&amp;gt;
      &amp;lt;i ng-show=&amp;quot;canCommentAction&amp;quot; class=&amp;quot;my-data-row-actions-comment icon&amp;quot; ng-click=&amp;quot;commentOnEntity($event)&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
      &amp;lt;i ng-show=&amp;quot;canDeleteAction&amp;quot; class=&amp;quot;my-data-row-actions-delete icon&amp;quot; ng-click=&amp;quot;deleteEntity($event)&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
      &amp;lt;i class=&amp;quot;icon&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
    &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function myDataRowDirective() {
    return {
        restrict: &#39;E&#39;,
        replace: true,
        templateUrl: &#39;directives/myDataRow/myDataRow.tpl.html&#39;,
        scope: {
            row: &#39;=&#39;,
            onDelete: &#39;&amp;amp;?&#39;,
            onComment: &#39;&amp;amp;?&#39;
        },
        link: myDataRowLink
    };
}

function myDataRowLink(scope, element, attrs) {
  //the ngShow flags are defined for the row actions
    scope.canDeleteAction = attrs.onDelete;
    scope.canCommentAction = attrs.onComment;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--Use of myDataRow--&amp;gt;
 &amp;lt;my-data-row
      on-delete=&amp;quot;stories.deleteStory(story, $event)&amp;quot;
      on-comment=&amp;quot;stories.commentOnStory(story, $event)&amp;quot;
      ng-repeat=&amp;quot;story in stories.userStories | filter: stories.searchUserStories | filter: stories.filterUserStoriesObj | orderBy: &#39;index&#39; track by story.id&amp;quot;
      row=&amp;quot;story&amp;quot;&amp;gt;
&amp;lt;/my-data-row&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything is fine, the directive works ok. But once the view gets heavy and has a lot of rows to show the user encounters slow responsiveness. The reasons may be beacause of the digest(sometimes running form &lt;code&gt;rootScope&lt;/code&gt;) cycle which runs trough many watchers. In an AngularJS app you can see whatchers everywhere including in &lt;a href=&#34;https://github.com/angular/angular.js/blob/master/src/ng/directive/ngShowHide.js&#34;&gt;ngShows&lt;/a&gt;  used within above template. Having them in a directive within an &lt;code&gt;ngRepeat&lt;/code&gt; adds more overhead to responsivness.&lt;/p&gt;

&lt;p&gt;Here comes &lt;code&gt;compile&lt;/code&gt; which gets rid of whatchers. Instead of checking whether to show or not the action buttons in the &lt;code&gt;link&lt;/code&gt; function, do it in &lt;code&gt;compile&lt;/code&gt;. This way the directive gets rid of 2 &lt;code&gt;ngShows&lt;/code&gt; and at the same time of 2 &lt;code&gt;whatchers&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// myDataRowDirective optimized
function myDataRowDirective() {
    return {
        restrict: &#39;E&#39;,
        replace: true,
        templateUrl: &#39;directives/myDataRow/myDataRow.tpl.html&#39;,
        scope: {
            row: &#39;=&#39;,
            onDelete: &#39;&amp;amp;?&#39;,
            onComment: &#39;&amp;amp;?&#39;
        },
        compile: myDataRowCompile
    };
}

function myDataRowCompile(tElement, tAttrs) {
    if (!tAttrs.onDelete) {
        tElement.find(&#39;.my-data-row-actions-delete&#39;).remove();
    }
    if (!tAttrs.onComment) {
        tElement.find(&#39;.my-data-row-actions-comment&#39;).remove();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the end would like to suggest you to read this stackoverflow &lt;a href=&#34;http://stackoverflow.com/questions/12164138/what-is-the-difference-between-compile-and-link-function-in-angularjs&#34;&gt;thread&lt;/a&gt; which references a few examples of when and how to use &lt;code&gt;compile&lt;/code&gt; instead of &lt;code&gt;link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Happy 2015 coding !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Split large AngularJS Controllers using the Mixin Pattern</title>
      <link>http://vadimpopa.com/split-large-angularjs-controllers-using-the-mixin-pattern/</link>
      <pubDate>Sun, 02 Mar 2014 21:12:06 +0300</pubDate>
      
      <guid>http://vadimpopa.com/split-large-angularjs-controllers-using-the-mixin-pattern/</guid>
      <description>&lt;p&gt;In case if your controller became too large and the inheritance is not a solution, the Mixin pattern can solve this problem very easy by splitting the logic in mixins each serving a functionality or a feature. Within AngularJS I found a easy to do it by using the &lt;code&gt;$controller&lt;/code&gt; service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//AngularJS Mixin
app.controller(&#39;CanSingController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	$scope.sing = function() {
	         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
	    };
    }
]);


app.controller(&#39;MusicianController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	var canSingCtrl = $controller(&#39;CanSingController&#39;,{$scope: $scope});

    	$scope.whatMusicianCanDo = function() {

    		//Call locally, or best call sing in your view
    		$scope.sing();
    	};
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For fun and comparation I brought also an ExtJS example found in its &lt;a href=&#34;http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Class-cfg-mixins&#34; title=&#34;http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Class-cfg-mixins&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//ExtJS Mixin
Ext.define(&#39;CanSing&#39;, {
     sing: function() {
         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
     }
});

Ext.define(&#39;Musician&#39;, {
     mixins: [&#39;CanSing&#39;]
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the &lt;code&gt;Musician&lt;/code&gt; will get a &lt;code&gt;sing&lt;/code&gt; method from &lt;code&gt;CanSing&lt;/code&gt; &lt;code&gt;controller&lt;/code&gt;/&lt;code&gt;mixin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If to raise same issue from ExtJS&amp;rsquo;s documentation: &lt;em&gt;what if the Musician already has a sing method? Or you want to mix in two classes, both of which define sing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In AngularJS this can be solved by defining the &lt;code&gt;sing&lt;/code&gt; method in the instantiated mixin, and use an identifier or a local variable within the parent controller to keep that instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//AngularJS Mixin without overriding
app.controller(&#39;CanSingController&#39;, [&#39;$scope&#39;
    function ($scope) {

	    return {
	    	sing: function() {
		         alert(&amp;quot;I&#39;m on the highway to hell...&amp;quot;)
		    }
	    }
    }
]);

app.controller(&#39;MusicianController&#39;, [&#39;$scope&#39;
    function ($scope) {
    	var canSing = $controller(&#39;CanSingController as canSing&#39;,{$scope: $scope}),

    	$scope.sing = function() {

    		// call trough the local variable
    		canSing.sing();	

    		//call trough the indentifier
    		$scope.canSing.sing();
    	}
    }
]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually I define within the &lt;code&gt;$scope&lt;/code&gt; the methods which are going to be exposed in views and in the instance the ones which will be called locally in the parent controller. This way I preserve a sort of encapsulation and also looks cleaner. But when defining wihtin the &lt;code&gt;$scope&lt;/code&gt; just make sure not to have overrides. To avoid them you could just use the &lt;code&gt;identifier&lt;/code&gt; approach which in some way also gives sort of encapsulation of all methods within one property.&lt;/p&gt;

&lt;p&gt;In ExtJS: &lt;em&gt;it&amp;rsquo;s good to define mixins as an object, where you assign a name to each mixin. In this case the sing method of &lt;code&gt;Musician&lt;/code&gt; will overwrite the mixed in &lt;code&gt;sing&lt;/code&gt; method. But you can access the original mixed in method through special mixins property.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//ExtJS Mixin without overriding
Ext.define(&#39;Musician&#39;, {
     mixins: {
         canSing: &#39;CanSing&#39;
     },

     sing: function() {
         // delegate singing operation to mixin
         this.mixins.canSing.sing.call(this);
     }
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Onblur like for a div in AngularJS to close a popup</title>
      <link>http://vadimpopa.com/onblur-like-for-a-div-in-angularjs-to-close-a-popup/</link>
      <pubDate>Fri, 24 Jan 2014 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/onblur-like-for-a-div-in-angularjs-to-close-a-popup/</guid>
      <description>&lt;p&gt;Often is needed to close a popup when the user clicks anywhere else in the page but not on popup. There are many workarounds for such functionality, including one of the simplest which is to give to the &lt;code&gt;div&lt;/code&gt; the &lt;code&gt;tabindex&lt;/code&gt; attribute and use &lt;code&gt;onblur&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;onblur&lt;/code&gt; wasn&amp;rsquo;t suitable for me because is fired only if the popup have got the focus, and the user may want to close that popup without giving the focus to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div tabindex=&amp;quot;-1&amp;quot; onblur=&amp;quot;closeMyPopup()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;AngularJS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;popup&amp;quot; tabindex=&amp;quot;-1&amp;quot; data-ng-show=&amp;quot;form.popups.myPopup&amp;quot; data-ui-event=&amp;quot;{ blur : &#39;closeMyPopup()&#39;}&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I&amp;rsquo;ve coded a very simple AngularJS directive which evaluates an expression on the containing scope when the dom click event is triggered and the target is not a child of that popup:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;app.directive(&amp;quot;outsideClick&amp;quot;, [&#39;$document&#39;,&#39;$parse&#39;, function( $document, $parse ){
    return {
        link: function( $scope, $element, $attributes ){
            var scopeExpression = $attributes.outsideClick,
                onDocumentClick = function(event){
                    var isChild = $element.find(event.target).length &amp;gt; 0;

                    if(!isChild) {
                        $scope.$apply(scopeExpression);
                    }
                };

            $document.on(&amp;quot;click&amp;quot;, onDocumentClick);

            $element.on(&#39;$destroy&#39;, function() {
                $document.off(&amp;quot;click&amp;quot;, onDocumentClick);
            });
        }
    }
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And simply to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;popup&amp;quot; data-ng-show=&amp;quot;form.popups.myPopup&amp;quot; outside-click=&amp;quot;closeMyPopup()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>First thoughts about AngularJS from an ExtJS developer perspective</title>
      <link>http://vadimpopa.com/first-thoughts-about-angularjs-from-an-extjs-developer-perspective/</link>
      <pubDate>Fri, 22 Nov 2013 22:59:32 +0300</pubDate>
      
      <guid>http://vadimpopa.com/first-thoughts-about-angularjs-from-an-extjs-developer-perspective/</guid>
      <description>&lt;p&gt;I thought that is time for me to learn something else, something new from the Front-end world just to be on same wave with latest trends and to feed the brain with a different perspective. After all life is all about learning and in doing we learn.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/feelings_about_angularjs_over_time.png&#34; style=&#34;display: block;margin: 0 auto; width:400px;height:300px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;I like everything what&amp;#8217;s connected with web apps and lately I&amp;#8217;ve been keeping my eyes on AngularJS. Seeing it&amp;#8217;s growing popularity and that AngularJS advocates a different approach of building web apps, got me intrigued and I&amp;#8217;ve started the learn process. After a week of diving in many resources I&amp;#8217;ve decided to put down some of my thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning curve&lt;/strong&gt;&lt;br /&gt;
I can agree with this &lt;a href=&#34;http://www.bennadel.com/blog/2439-My-Experience-With-AngularJS-The-Super-heroic-JavaScript-MVW-Framework.htm&#34; title=&#34;http://www.bennadel.com/blog/2439-My-Experience-With-AngularJS-The-Super-heroic-JavaScript-MVW-Framework.htm&#34;&gt;guy&lt;/a&gt;. You get down and up while trying to understand how the core works and you think sometimes that some of the things are easier and faster to achieve with less effort in ExtJS. sometimes the opposite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Documentation.&lt;/strong&gt;&lt;br /&gt;
Being indulged by ExtJS&amp;#8217;s good documentation, what I&amp;#8217;ve found on AngularJS made my start not easy. For more resources google is your friend. My search brought to surface a few good posts which I think worths to check:
&lt;!-- more --&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&#34;&gt;http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory&#34;&gt;http://stackoverflow.com/questions/15666048/angular-js-service-vs-provider-vs-factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ng-newsletter.com/posts/&#34;&gt;http://www.ng-newsletter.com/posts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals&#34;&gt;http://pluralsight.com/training/Courses/TableOfContents/angularjs-fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;First experiment and thoughts&lt;/strong&gt;&lt;br /&gt;
Ended up with a &lt;a title=&#34;http://plnkr.co/edit/61rmik&#34; href=&#34;http://plnkr.co/edit/61rmik&#34; target=&#34;_blank&#34;&gt;simple directive&lt;/a&gt; analog to the &lt;a title=&#34;https://github.com/vadimpopa/Ux.field.Multiselect&#34; href=&#34;https://github.com/vadimpopa/Ux.field.Multiselect&#34; target=&#34;_blank&#34;&gt;multiselectfield&lt;/a&gt; Sencha Touch component I built a few months ago. The implementation wasn&amp;#8217;t smooth and intuitive. Had to make some debugging and reread some resource to understand how scopes work in AngularJS for directives, parent and child elements. Other important AngularJS specifics on my learn list, is to understand how the watchers work in directives and how to write the code to end up with less of them.&lt;/p&gt;

&lt;p&gt;Angular seems a powerful, not big library. But building your first web components will take some time. Is not like you would extend an ExtJS &lt;code&gt;Panel&lt;/code&gt; with some child items or a &lt;code&gt;View&lt;/code&gt; with a configured &lt;code&gt;XTemplate&lt;/code&gt; and some methods.&lt;/p&gt;

&lt;p&gt;Overall when building an app or component you could spent 40% of your time on writing html and 60% javascript, while on ExtJS around 85% is javascript. Also ExtJS has built in nice layouts and a platform for theming, while on AngularJS is needed a 3&amp;#8242;rd-party CSS/JS library or some personal efforts.&lt;/p&gt;

&lt;p&gt;I like Angular&amp;#8217;s two way binding, though I&amp;#8217;m not sure yet when there are a lot of watches, from the performance perspective how the app will behave. Directives are very nice to make reusable components, but I&amp;#8217;ll need some time to get used to Angular&amp;#8217;s way of configuring components(directives) trough html attributes when in ExtJS  I did it trough javascript objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div ng-controller=&amp;quot;ExampleCtrl&amp;quot;&amp;gt;
    &amp;lt;nvd3-cumulative-line-chart
            data=&amp;quot;exampleData&amp;quot;
            id=&amp;quot;exampleId&amp;quot;
            width=&amp;quot;800&amp;quot;
            height=&amp;quot;400&amp;quot;
            showXAxis=&amp;quot;true&amp;quot;
            showYAxis=&amp;quot;true&amp;quot;
            tooltips=&amp;quot;true&amp;quot;
            interactive=&amp;quot;true&amp;quot;
            x=&amp;quot;xFunction()&amp;quot;
            y=&amp;quot;yFunction()&amp;quot;
            color=&amp;quot;colorFunction()&amp;quot;
            isArea=&amp;quot;true&amp;quot;
            margin=&amp;quot;{left:50,top:50,bottom:50,right:50}&amp;quot;
            &amp;gt;
        &amp;lt;svg&amp;gt;&amp;lt;/svg&amp;gt;
    &amp;lt;/nvd3-cumulative-line-chart&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Next Step&lt;/strong&gt;&lt;br /&gt;
Climb next peak on that learning curve, with some more patient along with some beers, going to reread some of the resources and build some more directives.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
