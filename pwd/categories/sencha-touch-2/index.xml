<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sencha Touch 2 on All the things about web and javascript</title>
    <link>http://vadimpopa.com/categories/sencha-touch-2/</link>
    <description>Recent content in Sencha Touch 2 on All the things about web and javascript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2008 - 2014, Vadim Popa; all rights reserved.</copyright>
    <lastBuildDate>Sat, 22 Jun 2013 17:50:16 +0300</lastBuildDate>
    <atom:link href="http://vadimpopa.com/categories/sencha-touch-2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NVD3 and Raphael as alternative charting libs for Sencha Touch</title>
      <link>http://vadimpopa.com/post/nvd3-and-raphael-as-alternative-charting-libs-for-sencha-touch/</link>
      <pubDate>Sat, 22 Jun 2013 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/post/nvd3-and-raphael-as-alternative-charting-libs-for-sencha-touch/</guid>
      <description>&lt;p&gt;Below my short journey in taking a look to NVD3 and Raphael as alternative charting libraries for &lt;a title=&#34;Sencha Touch 2&#34; href=&#34;http://www.sencha.com/products/touch&#34; target=&#34;_blank&#34;&gt;Sencha Touch&lt;/a&gt;(ST). ST has a powerful and nice charting library which is included as a part of Touch (available as GPLv3 or as a part of Sencha Complete and Complete: Team). Yet I&amp;#8217;ve wanted to try other charts libs with a more flexible license which will allow me to integrate them easily in a ST app and develop a simple line chart ST component.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/raphael_chart-280x200.png&#34; style=&#34;display: block;margin: 0 auto; width:280px;height:200px;&#34;&gt;
First on the list was &lt;a href=&#34;http://raphaeljs.com&#34; target=&#34;_blank&#34;&gt;Raphael&lt;/a&gt; which is part of Sencha Labs. Integration went pretty easy, and with a few lines of code, a simple basic line chart component in ST was ready. Many thanks to the author of this &lt;a href=&#34;http://www.exratione.com/2011/10/a-few-tips-for-graphael-line-charts/&#34;&gt;blog&lt;/a&gt; from which I took the Raphael example.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/*
 * xtype: &#39;rchartline&#39;,
 * chartData: {
 *   x: [1, 2, 3, 4, 5, 6, 7],
 *   y: [12, 32, 23, 15, 17, 27, 22]
 * }
 */

Ext.define(&#39;Ux.chart.RLine&#39;,{
    extend: &#39;Ext.Component&#39;,

    xtype: &#39;rchartline&#39;,

    config: {
        chartCfg:  {
           nostroke: false,   // lines between points are drawn
           axis: &amp;quot;0 0 1 1&amp;quot;,   // draw axes on the left and bottom
           symbol: &amp;quot;circle&amp;quot;,    // use a filled circle as the point symbol
           smooth: true,      // curve the lines to smooth turns on the chart
           dash: &amp;quot;-&amp;quot;,         // draw the lines dashed
           colors: [
             &amp;quot;#995555&amp;quot;,       // the first line is red
             &amp;quot;#555599&amp;quot;        // the second line is blue
           ]
         },
         chartData: {
          x: [],
          y: []
         }
    },
    initialize: function(){
      this.canvas = Raphael(this.innerElement.createChild({tag: &amp;quot;div&amp;quot;, cls: &#39;raphael-chartWrapper&#39;}).dom);

      this.on(&#39;painted&#39;,function(){
          var data = this.getChartData();

          this.canvas.linechart(10,10,390,180,data.x,data.y,this.getChartCfg());
      });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img class=&#34;right&#34; src=&#34;../../images/nvd3-280x200.png&#34; style=&#34;display: block;margin: 0 auto; width:200px;height:160px;&#34;&gt;
Next one was &lt;a href=&#34;http://nvd3.org&#34; target=&#34;_blank&#34;&gt;NVD3&lt;/a&gt;, a very nice simple library based on the powerful &lt;a href=&#34;http://d3js.org&#34; target=&#34;_blank&#34;&gt;D3&lt;/a&gt;. While NVD3 is not documented, D3 seems very well documented, and since the former is sort of facade to the second, it&amp;#8217;s good to check for examples and documentation on both sites. As you can see form first example you can suppose already that making an ST chart component based on NVD3 is also easy, which is true. The difference is that following example has the implementation of real time update while on Raphael it doesn&amp;#8217;t. That&amp;#8217;s because I was constrained by project time and haven&amp;#8217;t had it enough for looking the best way of how to do it (one of the ideas which worked was a call of canvas.clear() and draw the chart from scratch with linechart method).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Ux.chart.Line&#39;,{
    extend: &#39;Ext.Component&#39;,

    xtype: &#39;chartline&#39;,

    initialize: function(){

      nv.addGraph(Ext.bind(function(){
          var chart = nv.models.lineChart();

          chart.xAxis.tickFormat(function (d) {
            return d3.time.format(&#39;%x&#39;)(new Date(d))
          });

          chart.yAxis.tickFormat(d3.format(&#39;,.1%&#39;));

          d3.select(this.innerElement.dom).append(&#39;svg&#39;);

          nv.utils.windowResize(chart.update);

          this.chart = chart;

          return chart;
      },this));

      this.on(&#39;painted&#39;,function(){
          this.redraw();

          setInterval(Ext.bind(function () {
            var long = this.getData()[0].values,
                next = new Date(long[long.length - 1].x);

            next.setDate(next.getDate() + 1);
            long.shift();
            long.push({x:next.getTime(), y:Math.random() * 100});

            this.redraw();

          },this), 1500);
      },this)

    },

    redraw: function() {
      d3.select(this.innerElement.down(&#39;svg&#39;).dom)
            .datum(this.getData())
            .transition().duration(500)
            .call(this.chart);
    },
    generateData: function() {
        var arr = [],
            theDate = new Date(2012, 01, 01, 0, 0, 0, 0);

        for (var x = 0; x &amp;amp;lt; 30; x++) {
            arr.push({x: theDate.getTime(), y: Math.random() * 100});
            theDate.setDate(theDate.getDate() + 1);
        }
        return arr;
    },
    getData: function() {
      return [{
        &amp;quot;key&amp;quot;: &amp;quot;Long&amp;quot;,
        &amp;quot;values&amp;quot;: this.generateData()
      }];
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first impression D3 seems very powerful in charts drawing and richer than Raphael. Since it gave good results I stopped looking for other libraries and started work on an extension based on NVD3 and above example. For full examples source code and a running demo check my &lt;a href=&#34;https://github.com/vadimpopa/Ux.chart.Line&#34; target=&#34;_blank&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My journey stops here and I wish you happy charting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sencha ViewModel Tips</title>
      <link>http://vadimpopa.com/post/mobile-hardware-acceleration-and-sencha-touch-with-phonegap-considerations/</link>
      <pubDate>Mon, 29 Apr 2013 17:50:16 +0300</pubDate>
      
      <guid>http://vadimpopa.com/post/mobile-hardware-acceleration-and-sencha-touch-with-phonegap-considerations/</guid>
      <description>&lt;p&gt;As you can see on Sencha &lt;a title=&#34;http://www.sencha.com/products/touch/&#34; href=&#34;http://www.sencha.com/products/touch/&#34; target=&#34;_blank&#34;&gt;site&lt;/a&gt;,  Sencha Touch (ST) was developed to take advantage of &lt;strong&gt;hardware acceleration&lt;/strong&gt;. In case you don&amp;#8217;t know what hardware acceleration means and if you are starting to work on your first ST application then you should be informed about it as it might affect your app performance and responsiveness. Particularly when using PhoneGap 2.6(2.x) to deploy natively for Android 4.x, because Android default browser still has performance problems with 3D CSS transforms.&lt;/p&gt;

&lt;p&gt;To find more about the meaning of hardware acceleration in mobile technology you can visit these blogs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;About hardware acceleration: &lt;a title=&#34;http://www.sencha.com/blog/understanding-hardware-acceleration-on-mobile-browsers/&#34; href=&#34;http://www.sencha.com/blog/understanding-hardware-acceleration-on-mobile-browsers/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.sencha.com/blog/understanding-hardware-acceleration-on-mobile-browsers/&#34;&gt;http://www.sencha.com/blog/understanding-hardware-acceleration-on-mobile-browsers/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And what means to have it in your app: &lt;a title=&#34;http://www.tricedesigns.com/2013/03/11/performance-ux-considerations-for-successful-phonegap-apps/&#34; href=&#34;http://www.tricedesigns.com/2013/03/11/performance-ux-considerations-for-successful-phonegap-apps/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://www.tricedesigns.com/2013/03/11/performance-ux-considerations-for-successful-phonegap-apps&#34;&gt;http://www.tricedesigns.com/2013/03/11/performance-ux-considerations-for-successful-phonegap-apps&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also I recommend a very good &lt;a href=&#34;http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&#34; title=&#34;http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome&#34;&gt;post&lt;/a&gt; about GPU accelerated compositing in Chrome.&lt;/p&gt;

&lt;p&gt;Where hardware acceleration is used in ST? You can see it almost everywhere, in some layouts, scroller, list and in animations. As example, the Card layout, basically it works on translate3d. You must be careful with your DOM size, where and how you use the elements which trigger hardware acceleration. And if you deployed your hybrid Android app and you feel low performance and responsiveness then you might &lt;strong&gt;check if you disabled hardware acceleration in PhoneGap&amp;#8217;s Android Manifest&lt;/strong&gt;. By disabling, paradoxically it will boost your application to an acceptable level. Note that once is disabled then you will have to stick with flat effects because the 3D transforms, more exactly the Z axe won&amp;#8217;t work &amp;#8211; a needed CSS for such component like the &lt;a title=&#34;Coverflow&#34; href=&#34;http://twomonkeys.com.ar/lab/cover/&#34; target=&#34;_blank&#34;&gt;Coverflow&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Sencha Touch 2 SQL proxy for SQLite</title>
      <link>http://vadimpopa.com/post/sencha-touch-2-sql-proxy-for-sqlite/</link>
      <pubDate>Sun, 03 Mar 2013 21:12:06 +0300</pubDate>
      
      <guid>http://vadimpopa.com/post/sencha-touch-2-sql-proxy-for-sqlite/</guid>
      <description>

&lt;p&gt;Surfing Sencha forums day by day I&amp;#8217;ve come to the conclusion that today many Sencha Touch 2 users still don&amp;#8217;t know about the nice and well written SQL proxy (&lt;code&gt;Ext.data.proxy.Sql&lt;/code&gt;). Instead of it they use other extensions written by ST users which are easy to find on ST forum. But the default ST proxy also can by used for WebSQL or SQLite with Phonegap plugin and comparing with those extensions has a well written code, is more faster and is part of ST2.&lt;/p&gt;

&lt;p&gt;Saying this I&amp;#8217;ve decided to write a few words about how tot use it, only a few as here there&amp;#8217;s nothing more to write. Mainly because actually the SQL proxy is used like the other ST proxies except that it needs an override.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;App.model.MyModel&#39;, {
    extend: &#39;Ext.data.Model&#39;,

    config: {
        proxy: {
            type: &#39;sql&#39;
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only custom configuration is to include the following override of the default method &lt;code&gt;getDatabaseObject&lt;/code&gt; which has platform detection (only for iOS, but should be easy to add for Android too): if is not simulator and it&amp;#8217;s a web view then open the database trough Phonegap plugin &lt;code&gt;sqlitePlugin&lt;/code&gt;, else open it trough overridden method, thus the WebSQL &lt;code&gt;openDatabase&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Ext.data.proxy.SQLOverride&#39;, {
    override: &#39;Ext.data.proxy.SQL&#39;,

/* //Overridden method
    getDatabaseObject: function() {
        return openDatabase(this.getDatabase(), &#39;1.0&#39;, &#39;Sencha Database&#39;, 5 * 1024 * 1024);
    }
*/
    getDatabaseObject: function() {
        var isWebView = false;

        if(Ext.os.is.Android){
            isWebView = /AppName/i.test(navigator.userAgent);
        }
        else
        if (Ext.os.is.iOS &amp;amp;&amp;amp; !/simulator/i.test(navigator.platform)) {
            isWebView = /(iPhone|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent);
        }

        return isWebView ? sqlitePlugin.openDatabase(&amp;quot;data.sqlite&amp;quot;) : this.callParent();
    }
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find the Phonegap plugin on github: &lt;a href=&#34;https://github.com/brodyspark/PhoneGap-sqlitePlugin-iOS&#34; title=&#34;https://github.com/brodyspark/PhoneGap-sqlitePlugin-iOS&#34;&gt;https://github.com/brodyspark/PhoneGap-sqlitePlugin-iOS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also you can check this &lt;a href=&#34;http://druckit.wordpress.com/2013/04/02/revisiting-the-sencha-touch-2-2-sql-proxy/&#34;&gt;blog post&lt;/a&gt; for a nice cover.&lt;/p&gt;

&lt;h4 id=&#34;edit-25-03-2013&#34;&gt;&lt;strong&gt;EDIT(25.03.2013):&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Edited this post to add Android part. In the override just replaced the code of the &lt;em&gt;getDatabaseObject&lt;/em&gt;. And with the default user agent is impossible to indetify if it&amp;#8217;s a WebView or a browser. To overcome this, in case if you are on Phonegap, as I was, just set you user agent like following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;@Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        super.appView.getSettings().setUserAgentString(
        	    super.appView.getSettings().getUserAgentString()
        	    + &amp;quot; &amp;quot;
        	    + getString(R.string.app_name));

        super.loadUrl(Config.getStartUrl());
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
